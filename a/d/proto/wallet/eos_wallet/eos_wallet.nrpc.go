// This code was autogenerated from wallet/eos_wallet/eos_wallet.proto, do not edit.
package proto

import (
	"context"
	"log"
	"time"

	"github.com/golang/protobuf/proto"
	nats "github.com/nats-io/go-nats"
	"github.com/nats-rpc/nrpc"
)

// EosWalletServiceServer is the interface that providers of the service
// EosWalletService should implement.
type EosWalletServiceServer interface {
	Deposit(ctx context.Context, req DepositReq) (resp DepositResp, err error)
	EosWithdraw(ctx context.Context, req EosWithdrawReq) (resp EosWithdrawResp, err error)
}

// EosWalletServiceHandler provides a NATS subscription handler that can serve a
// subscription using a given EosWalletServiceServer implementation.
type EosWalletServiceHandler struct {
	ctx     context.Context
	workers *nrpc.WorkerPool
	nc      nrpc.NatsConn
	server  EosWalletServiceServer
}

func NewEosWalletServiceHandler(ctx context.Context, nc nrpc.NatsConn, s EosWalletServiceServer) *EosWalletServiceHandler {
	return &EosWalletServiceHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,
	}
}

func NewEosWalletServiceConcurrentHandler(workers *nrpc.WorkerPool, nc nrpc.NatsConn, s EosWalletServiceServer) *EosWalletServiceHandler {
	return &EosWalletServiceHandler{
		workers: workers,
		nc:      nc,
		server:  s,
	}
}

func (h *EosWalletServiceHandler) Subject() string {
	return "proto.EosWalletService.>"
}

func (h *EosWalletServiceHandler) Handler(msg *nats.Msg) {
	var ctx context.Context
	if h.workers != nil {
		ctx = h.workers.Context
	} else {
		ctx = h.ctx
	}
	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"proto", 0, "EosWalletService", 0, msg.Subject)
	if err != nil {
		log.Printf("EosWalletServiceHanlder: EosWalletService subject parsing failed: %v", err)
		return
	}

	request.MethodName = name
	request.SubjectTail = tail

	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "Deposit":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("DepositHanlder: Deposit subject parsing failed: %v", err)
			break
		}
		var req DepositReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("DepositHandler: Deposit request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.Deposit(ctx, req)
				if err != nil {
					return nil, err
				}
				return &innerResp, err
			}
		}
	case "EosWithdraw":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("EosWithdrawHanlder: EosWithdraw subject parsing failed: %v", err)
			break
		}
		var req EosWithdrawReq
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("EosWithdrawHandler: EosWithdraw request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type: nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context)(proto.Message, error){
				innerResp, err := h.server.EosWithdraw(ctx, req)
				if err != nil {
					return nil, err
				}
				return &innerResp, err
			}
		}
	default:
		log.Printf("EosWalletServiceHandler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type: nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}

	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("EosWalletServiceHandler: EosWalletService handler failed to publish the response: %s", err)
		}
	} else {
	}
}

type EosWalletServiceClient struct {
	nc      nrpc.NatsConn
	PkgSubject string
	Subject string
	Encoding string
	Timeout time.Duration
}

func NewEosWalletServiceClient(nc nrpc.NatsConn) *EosWalletServiceClient {
	return &EosWalletServiceClient{
		nc:      nc,
		PkgSubject: "proto",
		Subject: "EosWalletService",
		Encoding: "protobuf",
		Timeout: 5 * time.Second,
	}
}

func (c *EosWalletServiceClient) Deposit(req DepositReq) (resp DepositResp, err error) {

	subject := c.PkgSubject + "." + c.Subject + "." + "Deposit"

	// call
	err = nrpc.Call(&req, &resp, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}

	return
}

func (c *EosWalletServiceClient) EosWithdraw(req EosWithdrawReq) (resp EosWithdrawResp, err error) {

	subject := c.PkgSubject + "." + c.Subject + "." + "EosWithdraw"

	// call
	err = nrpc.Call(&req, &resp, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}

	return
}

type Client struct {
	nc      nrpc.NatsConn
	defaultEncoding string
	defaultTimeout time.Duration
	pkgSubject string
	EosWalletService *EosWalletServiceClient
}

func NewClient(nc nrpc.NatsConn) *Client {
	c := Client{
		nc: nc,
		defaultEncoding: "protobuf",
		defaultTimeout: 5*time.Second,
		pkgSubject: "proto",
	}
	c.EosWalletService = NewEosWalletServiceClient(nc)
	return &c
}

func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	if c.EosWalletService != nil {
		c.EosWalletService.Encoding = encoding
	}
}

func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	if c.EosWalletService != nil {
		c.EosWalletService.Timeout = t
	}
}