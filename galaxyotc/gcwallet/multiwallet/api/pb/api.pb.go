// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Empty
	CoinSelection
	Row
	KeySelection
	Address
	Height
	Balances
	Key
	Keys
	Addresses
	BoolResponse
	NetParams
	TransactionList
	Tx
	Txid
	FeeLevelSelection
	FeePerByte
	Fee
	SpendInfo
	Confirmations
	Utxo
	SweepInfo
	Input
	Output
	Signature
	CreateMultisigInfo
	SignatureList
	MultisignInfo
	RawTx
	EstimateFeeData
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CoinType int32

const (
	CoinType_BITCOIN      CoinType = 0
	CoinType_BITCOIN_CASH CoinType = 1
	CoinType_ZCASH        CoinType = 2
	CoinType_LITECOIN     CoinType = 3
)

var CoinType_name = map[int32]string{
	0: "BITCOIN",
	1: "BITCOIN_CASH",
	2: "ZCASH",
	3: "LITECOIN",
}
var CoinType_value = map[string]int32{
	"BITCOIN":      0,
	"BITCOIN_CASH": 1,
	"ZCASH":        2,
	"LITECOIN":     3,
}

func (x CoinType) String() string {
	return proto.EnumName(CoinType_name, int32(x))
}
func (CoinType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type KeyPurpose int32

const (
	KeyPurpose_INTERNAL KeyPurpose = 0
	KeyPurpose_EXTERNAL KeyPurpose = 1
)

var KeyPurpose_name = map[int32]string{
	0: "INTERNAL",
	1: "EXTERNAL",
}
var KeyPurpose_value = map[string]int32{
	"INTERNAL": 0,
	"EXTERNAL": 1,
}

func (x KeyPurpose) String() string {
	return proto.EnumName(KeyPurpose_name, int32(x))
}
func (KeyPurpose) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FeeLevel int32

const (
	FeeLevel_ECONOMIC FeeLevel = 0
	FeeLevel_NORMAL   FeeLevel = 1
	FeeLevel_PRIORITY FeeLevel = 2
)

var FeeLevel_name = map[int32]string{
	0: "ECONOMIC",
	1: "NORMAL",
	2: "PRIORITY",
}
var FeeLevel_value = map[string]int32{
	"ECONOMIC": 0,
	"NORMAL":   1,
	"PRIORITY": 2,
}

func (x FeeLevel) String() string {
	return proto.EnumName(FeeLevel_name, int32(x))
}
func (FeeLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CoinSelection struct {
	Coin CoinType `protobuf:"varint,1,opt,name=coin,enum=pb.CoinType" json:"coin,omitempty"`
}

func (m *CoinSelection) Reset()                    { *m = CoinSelection{} }
func (m *CoinSelection) String() string            { return proto.CompactTextString(m) }
func (*CoinSelection) ProtoMessage()               {}
func (*CoinSelection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CoinSelection) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

type Row struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Row) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type KeySelection struct {
	Coin    CoinType   `protobuf:"varint,1,opt,name=coin,enum=pb.CoinType" json:"coin,omitempty"`
	Purpose KeyPurpose `protobuf:"varint,2,opt,name=purpose,enum=pb.KeyPurpose" json:"purpose,omitempty"`
}

func (m *KeySelection) Reset()                    { *m = KeySelection{} }
func (m *KeySelection) String() string            { return proto.CompactTextString(m) }
func (*KeySelection) ProtoMessage()               {}
func (*KeySelection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *KeySelection) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *KeySelection) GetPurpose() KeyPurpose {
	if m != nil {
		return m.Purpose
	}
	return KeyPurpose_INTERNAL
}

type Address struct {
	Coin CoinType `protobuf:"varint,1,opt,name=coin,enum=pb.CoinType" json:"coin,omitempty"`
	Addr string   `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Address) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *Address) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type Height struct {
	Height uint32 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *Height) Reset()                    { *m = Height{} }
func (m *Height) String() string            { return proto.CompactTextString(m) }
func (*Height) ProtoMessage()               {}
func (*Height) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Height) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Balances struct {
	Confirmed   uint64 `protobuf:"varint,1,opt,name=confirmed" json:"confirmed,omitempty"`
	Unconfirmed uint64 `protobuf:"varint,2,opt,name=unconfirmed" json:"unconfirmed,omitempty"`
}

func (m *Balances) Reset()                    { *m = Balances{} }
func (m *Balances) String() string            { return proto.CompactTextString(m) }
func (*Balances) ProtoMessage()               {}
func (*Balances) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Balances) GetConfirmed() uint64 {
	if m != nil {
		return m.Confirmed
	}
	return 0
}

func (m *Balances) GetUnconfirmed() uint64 {
	if m != nil {
		return m.Unconfirmed
	}
	return 0
}

type Key struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Keys struct {
	Keys []*Key `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *Keys) Reset()                    { *m = Keys{} }
func (m *Keys) String() string            { return proto.CompactTextString(m) }
func (*Keys) ProtoMessage()               {}
func (*Keys) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Keys) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

type Addresses struct {
	Addresses []*Address `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *Addresses) Reset()                    { *m = Addresses{} }
func (m *Addresses) String() string            { return proto.CompactTextString(m) }
func (*Addresses) ProtoMessage()               {}
func (*Addresses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Addresses) GetAddresses() []*Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type BoolResponse struct {
	Bool bool `protobuf:"varint,1,opt,name=bool" json:"bool,omitempty"`
}

func (m *BoolResponse) Reset()                    { *m = BoolResponse{} }
func (m *BoolResponse) String() string            { return proto.CompactTextString(m) }
func (*BoolResponse) ProtoMessage()               {}
func (*BoolResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BoolResponse) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

type NetParams struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *NetParams) Reset()                    { *m = NetParams{} }
func (m *NetParams) String() string            { return proto.CompactTextString(m) }
func (*NetParams) ProtoMessage()               {}
func (*NetParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NetParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TransactionList struct {
	Transactions []*Tx `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *TransactionList) Reset()                    { *m = TransactionList{} }
func (m *TransactionList) String() string            { return proto.CompactTextString(m) }
func (*TransactionList) ProtoMessage()               {}
func (*TransactionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TransactionList) GetTransactions() []*Tx {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Tx struct {
	Txid      string                     `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Value     int64                      `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Height    int32                      `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	WatchOnly bool                       `protobuf:"varint,5,opt,name=watchOnly" json:"watchOnly,omitempty"`
	Raw       []byte                     `protobuf:"bytes,6,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (m *Tx) String() string            { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Tx) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *Tx) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Tx) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Tx) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Tx) GetWatchOnly() bool {
	if m != nil {
		return m.WatchOnly
	}
	return false
}

func (m *Tx) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

type Txid struct {
	Coin CoinType `protobuf:"varint,1,opt,name=coin,enum=pb.CoinType" json:"coin,omitempty"`
	Hash string   `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
}

func (m *Txid) Reset()                    { *m = Txid{} }
func (m *Txid) String() string            { return proto.CompactTextString(m) }
func (*Txid) ProtoMessage()               {}
func (*Txid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Txid) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *Txid) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type FeeLevelSelection struct {
	Coin     CoinType `protobuf:"varint,1,opt,name=coin,enum=pb.CoinType" json:"coin,omitempty"`
	FeeLevel FeeLevel `protobuf:"varint,2,opt,name=feeLevel,enum=pb.FeeLevel" json:"feeLevel,omitempty"`
}

func (m *FeeLevelSelection) Reset()                    { *m = FeeLevelSelection{} }
func (m *FeeLevelSelection) String() string            { return proto.CompactTextString(m) }
func (*FeeLevelSelection) ProtoMessage()               {}
func (*FeeLevelSelection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FeeLevelSelection) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *FeeLevelSelection) GetFeeLevel() FeeLevel {
	if m != nil {
		return m.FeeLevel
	}
	return FeeLevel_ECONOMIC
}

type FeePerByte struct {
	Fee uint64 `protobuf:"varint,1,opt,name=fee" json:"fee,omitempty"`
}

func (m *FeePerByte) Reset()                    { *m = FeePerByte{} }
func (m *FeePerByte) String() string            { return proto.CompactTextString(m) }
func (*FeePerByte) ProtoMessage()               {}
func (*FeePerByte) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FeePerByte) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type Fee struct {
	Fee uint64 `protobuf:"varint,1,opt,name=fee" json:"fee,omitempty"`
}

func (m *Fee) Reset()                    { *m = Fee{} }
func (m *Fee) String() string            { return proto.CompactTextString(m) }
func (*Fee) ProtoMessage()               {}
func (*Fee) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Fee) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type SpendInfo struct {
	Coin     CoinType `protobuf:"varint,1,opt,name=coin,enum=pb.CoinType" json:"coin,omitempty"`
	Address  string   `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Amount   uint64   `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	FeeLevel FeeLevel `protobuf:"varint,4,opt,name=feeLevel,enum=pb.FeeLevel" json:"feeLevel,omitempty"`
}

func (m *SpendInfo) Reset()                    { *m = SpendInfo{} }
func (m *SpendInfo) String() string            { return proto.CompactTextString(m) }
func (*SpendInfo) ProtoMessage()               {}
func (*SpendInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SpendInfo) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *SpendInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SpendInfo) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *SpendInfo) GetFeeLevel() FeeLevel {
	if m != nil {
		return m.FeeLevel
	}
	return FeeLevel_ECONOMIC
}

type Confirmations struct {
	Confirmations uint32 `protobuf:"varint,1,opt,name=confirmations" json:"confirmations,omitempty"`
}

func (m *Confirmations) Reset()                    { *m = Confirmations{} }
func (m *Confirmations) String() string            { return proto.CompactTextString(m) }
func (*Confirmations) ProtoMessage()               {}
func (*Confirmations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Confirmations) GetConfirmations() uint32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

type Utxo struct {
	Txid  string `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Index uint32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Value uint64 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (m *Utxo) Reset()                    { *m = Utxo{} }
func (m *Utxo) String() string            { return proto.CompactTextString(m) }
func (*Utxo) ProtoMessage()               {}
func (*Utxo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Utxo) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *Utxo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Utxo) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SweepInfo struct {
	Coin         CoinType `protobuf:"varint,1,opt,name=coin,enum=pb.CoinType" json:"coin,omitempty"`
	Utxos        []*Utxo  `protobuf:"bytes,2,rep,name=utxos" json:"utxos,omitempty"`
	Address      string   `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	Key          string   `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	RedeemScript []byte   `protobuf:"bytes,5,opt,name=redeemScript,proto3" json:"redeemScript,omitempty"`
	FeeLevel     FeeLevel `protobuf:"varint,6,opt,name=feeLevel,enum=pb.FeeLevel" json:"feeLevel,omitempty"`
}

func (m *SweepInfo) Reset()                    { *m = SweepInfo{} }
func (m *SweepInfo) String() string            { return proto.CompactTextString(m) }
func (*SweepInfo) ProtoMessage()               {}
func (*SweepInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SweepInfo) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *SweepInfo) GetUtxos() []*Utxo {
	if m != nil {
		return m.Utxos
	}
	return nil
}

func (m *SweepInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SweepInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SweepInfo) GetRedeemScript() []byte {
	if m != nil {
		return m.RedeemScript
	}
	return nil
}

func (m *SweepInfo) GetFeeLevel() FeeLevel {
	if m != nil {
		return m.FeeLevel
	}
	return FeeLevel_ECONOMIC
}

type Input struct {
	Txid  string `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Index uint32 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (m *Input) Reset()                    { *m = Input{} }
func (m *Input) String() string            { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()               {}
func (*Input) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Input) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *Input) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Output struct {
	ScriptPubKey []byte `protobuf:"bytes,1,opt,name=scriptPubKey,proto3" json:"scriptPubKey,omitempty"`
	Value        uint64 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *Output) Reset()                    { *m = Output{} }
func (m *Output) String() string            { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()               {}
func (*Output) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Output) GetScriptPubKey() []byte {
	if m != nil {
		return m.ScriptPubKey
	}
	return nil
}

func (m *Output) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Signature struct {
	Index     uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Signature) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type CreateMultisigInfo struct {
	Coin         CoinType  `protobuf:"varint,1,opt,name=coin,enum=pb.CoinType" json:"coin,omitempty"`
	Inputs       []*Input  `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	Outputs      []*Output `protobuf:"bytes,3,rep,name=outputs" json:"outputs,omitempty"`
	Key          string    `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	RedeemScript []byte    `protobuf:"bytes,5,opt,name=redeemScript,proto3" json:"redeemScript,omitempty"`
	FeePerByte   uint64    `protobuf:"varint,6,opt,name=feePerByte" json:"feePerByte,omitempty"`
}

func (m *CreateMultisigInfo) Reset()                    { *m = CreateMultisigInfo{} }
func (m *CreateMultisigInfo) String() string            { return proto.CompactTextString(m) }
func (*CreateMultisigInfo) ProtoMessage()               {}
func (*CreateMultisigInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CreateMultisigInfo) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *CreateMultisigInfo) GetInputs() []*Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *CreateMultisigInfo) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *CreateMultisigInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CreateMultisigInfo) GetRedeemScript() []byte {
	if m != nil {
		return m.RedeemScript
	}
	return nil
}

func (m *CreateMultisigInfo) GetFeePerByte() uint64 {
	if m != nil {
		return m.FeePerByte
	}
	return 0
}

type SignatureList struct {
	Sigs []*Signature `protobuf:"bytes,1,rep,name=sigs" json:"sigs,omitempty"`
}

func (m *SignatureList) Reset()                    { *m = SignatureList{} }
func (m *SignatureList) String() string            { return proto.CompactTextString(m) }
func (*SignatureList) ProtoMessage()               {}
func (*SignatureList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *SignatureList) GetSigs() []*Signature {
	if m != nil {
		return m.Sigs
	}
	return nil
}

type MultisignInfo struct {
	Coin         CoinType     `protobuf:"varint,1,opt,name=coin,enum=pb.CoinType" json:"coin,omitempty"`
	Inputs       []*Input     `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	Outputs      []*Output    `protobuf:"bytes,3,rep,name=outputs" json:"outputs,omitempty"`
	Sig1         []*Signature `protobuf:"bytes,4,rep,name=sig1" json:"sig1,omitempty"`
	Sig2         []*Signature `protobuf:"bytes,5,rep,name=sig2" json:"sig2,omitempty"`
	RedeemScript []byte       `protobuf:"bytes,6,opt,name=redeemScript,proto3" json:"redeemScript,omitempty"`
	FeePerByte   uint64       `protobuf:"varint,7,opt,name=feePerByte" json:"feePerByte,omitempty"`
	Broadcast    bool         `protobuf:"varint,8,opt,name=broadcast" json:"broadcast,omitempty"`
}

func (m *MultisignInfo) Reset()                    { *m = MultisignInfo{} }
func (m *MultisignInfo) String() string            { return proto.CompactTextString(m) }
func (*MultisignInfo) ProtoMessage()               {}
func (*MultisignInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *MultisignInfo) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *MultisignInfo) GetInputs() []*Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *MultisignInfo) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *MultisignInfo) GetSig1() []*Signature {
	if m != nil {
		return m.Sig1
	}
	return nil
}

func (m *MultisignInfo) GetSig2() []*Signature {
	if m != nil {
		return m.Sig2
	}
	return nil
}

func (m *MultisignInfo) GetRedeemScript() []byte {
	if m != nil {
		return m.RedeemScript
	}
	return nil
}

func (m *MultisignInfo) GetFeePerByte() uint64 {
	if m != nil {
		return m.FeePerByte
	}
	return 0
}

func (m *MultisignInfo) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

type RawTx struct {
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *RawTx) Reset()                    { *m = RawTx{} }
func (m *RawTx) String() string            { return proto.CompactTextString(m) }
func (*RawTx) ProtoMessage()               {}
func (*RawTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *RawTx) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

type EstimateFeeData struct {
	Coin       CoinType  `protobuf:"varint,1,opt,name=coin,enum=pb.CoinType" json:"coin,omitempty"`
	Inputs     []*Input  `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	Outputs    []*Output `protobuf:"bytes,3,rep,name=outputs" json:"outputs,omitempty"`
	FeePerByte uint64    `protobuf:"varint,4,opt,name=feePerByte" json:"feePerByte,omitempty"`
}

func (m *EstimateFeeData) Reset()                    { *m = EstimateFeeData{} }
func (m *EstimateFeeData) String() string            { return proto.CompactTextString(m) }
func (*EstimateFeeData) ProtoMessage()               {}
func (*EstimateFeeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *EstimateFeeData) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *EstimateFeeData) GetInputs() []*Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *EstimateFeeData) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *EstimateFeeData) GetFeePerByte() uint64 {
	if m != nil {
		return m.FeePerByte
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*CoinSelection)(nil), "pb.CoinSelection")
	proto.RegisterType((*Row)(nil), "pb.Row")
	proto.RegisterType((*KeySelection)(nil), "pb.KeySelection")
	proto.RegisterType((*Address)(nil), "pb.Address")
	proto.RegisterType((*Height)(nil), "pb.Height")
	proto.RegisterType((*Balances)(nil), "pb.Balances")
	proto.RegisterType((*Key)(nil), "pb.Key")
	proto.RegisterType((*Keys)(nil), "pb.Keys")
	proto.RegisterType((*Addresses)(nil), "pb.Addresses")
	proto.RegisterType((*BoolResponse)(nil), "pb.BoolResponse")
	proto.RegisterType((*NetParams)(nil), "pb.NetParams")
	proto.RegisterType((*TransactionList)(nil), "pb.TransactionList")
	proto.RegisterType((*Tx)(nil), "pb.Tx")
	proto.RegisterType((*Txid)(nil), "pb.Txid")
	proto.RegisterType((*FeeLevelSelection)(nil), "pb.FeeLevelSelection")
	proto.RegisterType((*FeePerByte)(nil), "pb.FeePerByte")
	proto.RegisterType((*Fee)(nil), "pb.Fee")
	proto.RegisterType((*SpendInfo)(nil), "pb.SpendInfo")
	proto.RegisterType((*Confirmations)(nil), "pb.Confirmations")
	proto.RegisterType((*Utxo)(nil), "pb.Utxo")
	proto.RegisterType((*SweepInfo)(nil), "pb.SweepInfo")
	proto.RegisterType((*Input)(nil), "pb.Input")
	proto.RegisterType((*Output)(nil), "pb.Output")
	proto.RegisterType((*Signature)(nil), "pb.Signature")
	proto.RegisterType((*CreateMultisigInfo)(nil), "pb.CreateMultisigInfo")
	proto.RegisterType((*SignatureList)(nil), "pb.SignatureList")
	proto.RegisterType((*MultisignInfo)(nil), "pb.MultisignInfo")
	proto.RegisterType((*RawTx)(nil), "pb.RawTx")
	proto.RegisterType((*EstimateFeeData)(nil), "pb.EstimateFeeData")
	proto.RegisterEnum("pb.CoinType", CoinType_name, CoinType_value)
	proto.RegisterEnum("pb.KeyPurpose", KeyPurpose_name, KeyPurpose_value)
	proto.RegisterEnum("pb.FeeLevel", FeeLevel_name, FeeLevel_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CurrentAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error)
	NewAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error)
	ChainTip(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Height, error)
	Balance(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Balances, error)
	MasterPrivateKey(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Key, error)
	MasterPublicKey(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Key, error)
	HasKey(ctx context.Context, in *Address, opts ...grpc.CallOption) (*BoolResponse, error)
	Params(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetParams, error)
	Transactions(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*TransactionList, error)
	GetTransaction(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Tx, error)
	GetFeePerByte(ctx context.Context, in *FeeLevelSelection, opts ...grpc.CallOption) (*FeePerByte, error)
	Spend(ctx context.Context, in *SpendInfo, opts ...grpc.CallOption) (*Txid, error)
	BumpFee(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Txid, error)
	AddWatchedScript(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Empty, error)
	GetConfirmations(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Confirmations, error)
	SweepAddress(ctx context.Context, in *SweepInfo, opts ...grpc.CallOption) (*Txid, error)
	CreateMultisigSignature(ctx context.Context, in *CreateMultisigInfo, opts ...grpc.CallOption) (*SignatureList, error)
	Multisign(ctx context.Context, in *MultisignInfo, opts ...grpc.CallOption) (*RawTx, error)
	EstimateFee(ctx context.Context, in *EstimateFeeData, opts ...grpc.CallOption) (*Fee, error)
	GetKey(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Key, error)
	ListKeys(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Keys, error)
	ListAddresses(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Addresses, error)
	WalletNotify(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (API_WalletNotifyClient, error)
	DumpTables(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (API_DumpTablesClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.API/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CurrentAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := grpc.Invoke(ctx, "/pb.API/CurrentAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NewAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := grpc.Invoke(ctx, "/pb.API/NewAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ChainTip(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Height, error) {
	out := new(Height)
	err := grpc.Invoke(ctx, "/pb.API/ChainTip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Balance(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Balances, error) {
	out := new(Balances)
	err := grpc.Invoke(ctx, "/pb.API/Balance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MasterPrivateKey(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := grpc.Invoke(ctx, "/pb.API/MasterPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MasterPublicKey(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := grpc.Invoke(ctx, "/pb.API/MasterPublicKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) HasKey(ctx context.Context, in *Address, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := grpc.Invoke(ctx, "/pb.API/HasKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Params(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetParams, error) {
	out := new(NetParams)
	err := grpc.Invoke(ctx, "/pb.API/Params", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Transactions(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := grpc.Invoke(ctx, "/pb.API/Transactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetTransaction(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Tx, error) {
	out := new(Tx)
	err := grpc.Invoke(ctx, "/pb.API/GetTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetFeePerByte(ctx context.Context, in *FeeLevelSelection, opts ...grpc.CallOption) (*FeePerByte, error) {
	out := new(FeePerByte)
	err := grpc.Invoke(ctx, "/pb.API/GetFeePerByte", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Spend(ctx context.Context, in *SpendInfo, opts ...grpc.CallOption) (*Txid, error) {
	out := new(Txid)
	err := grpc.Invoke(ctx, "/pb.API/Spend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) BumpFee(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Txid, error) {
	out := new(Txid)
	err := grpc.Invoke(ctx, "/pb.API/BumpFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddWatchedScript(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.API/AddWatchedScript", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetConfirmations(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Confirmations, error) {
	out := new(Confirmations)
	err := grpc.Invoke(ctx, "/pb.API/GetConfirmations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SweepAddress(ctx context.Context, in *SweepInfo, opts ...grpc.CallOption) (*Txid, error) {
	out := new(Txid)
	err := grpc.Invoke(ctx, "/pb.API/SweepAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateMultisigSignature(ctx context.Context, in *CreateMultisigInfo, opts ...grpc.CallOption) (*SignatureList, error) {
	out := new(SignatureList)
	err := grpc.Invoke(ctx, "/pb.API/CreateMultisigSignature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Multisign(ctx context.Context, in *MultisignInfo, opts ...grpc.CallOption) (*RawTx, error) {
	out := new(RawTx)
	err := grpc.Invoke(ctx, "/pb.API/Multisign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) EstimateFee(ctx context.Context, in *EstimateFeeData, opts ...grpc.CallOption) (*Fee, error) {
	out := new(Fee)
	err := grpc.Invoke(ctx, "/pb.API/EstimateFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetKey(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := grpc.Invoke(ctx, "/pb.API/GetKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListKeys(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Keys, error) {
	out := new(Keys)
	err := grpc.Invoke(ctx, "/pb.API/ListKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListAddresses(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := grpc.Invoke(ctx, "/pb.API/ListAddresses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) WalletNotify(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (API_WalletNotifyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/pb.API/WalletNotify", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIWalletNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_WalletNotifyClient interface {
	Recv() (*Tx, error)
	grpc.ClientStream
}

type aPIWalletNotifyClient struct {
	grpc.ClientStream
}

func (x *aPIWalletNotifyClient) Recv() (*Tx, error) {
	m := new(Tx)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) DumpTables(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (API_DumpTablesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[1], c.cc, "/pb.API/DumpTables", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIDumpTablesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_DumpTablesClient interface {
	Recv() (*Row, error)
	grpc.ClientStream
}

type aPIDumpTablesClient struct {
	grpc.ClientStream
}

func (x *aPIDumpTablesClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for API service

type APIServer interface {
	Stop(context.Context, *Empty) (*Empty, error)
	CurrentAddress(context.Context, *KeySelection) (*Address, error)
	NewAddress(context.Context, *KeySelection) (*Address, error)
	ChainTip(context.Context, *CoinSelection) (*Height, error)
	Balance(context.Context, *CoinSelection) (*Balances, error)
	MasterPrivateKey(context.Context, *CoinSelection) (*Key, error)
	MasterPublicKey(context.Context, *CoinSelection) (*Key, error)
	HasKey(context.Context, *Address) (*BoolResponse, error)
	Params(context.Context, *Empty) (*NetParams, error)
	Transactions(context.Context, *CoinSelection) (*TransactionList, error)
	GetTransaction(context.Context, *Txid) (*Tx, error)
	GetFeePerByte(context.Context, *FeeLevelSelection) (*FeePerByte, error)
	Spend(context.Context, *SpendInfo) (*Txid, error)
	BumpFee(context.Context, *Txid) (*Txid, error)
	AddWatchedScript(context.Context, *Address) (*Empty, error)
	GetConfirmations(context.Context, *Txid) (*Confirmations, error)
	SweepAddress(context.Context, *SweepInfo) (*Txid, error)
	CreateMultisigSignature(context.Context, *CreateMultisigInfo) (*SignatureList, error)
	Multisign(context.Context, *MultisignInfo) (*RawTx, error)
	EstimateFee(context.Context, *EstimateFeeData) (*Fee, error)
	GetKey(context.Context, *Address) (*Key, error)
	ListKeys(context.Context, *CoinSelection) (*Keys, error)
	ListAddresses(context.Context, *CoinSelection) (*Addresses, error)
	WalletNotify(*CoinSelection, API_WalletNotifyServer) error
	DumpTables(*CoinSelection, API_DumpTablesServer) error
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CurrentAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeySelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CurrentAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/CurrentAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CurrentAddress(ctx, req.(*KeySelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeySelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/NewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NewAddress(ctx, req.(*KeySelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ChainTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ChainTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ChainTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ChainTip(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Balance(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MasterPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MasterPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/MasterPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MasterPrivateKey(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MasterPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MasterPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/MasterPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MasterPublicKey(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_HasKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).HasKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/HasKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).HasKey(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Params(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Transactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Transactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Transactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Transactions(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Txid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetTransaction(ctx, req.(*Txid))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetFeePerByte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeLevelSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetFeePerByte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/GetFeePerByte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetFeePerByte(ctx, req.(*FeeLevelSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Spend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Spend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Spend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Spend(ctx, req.(*SpendInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_BumpFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Txid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).BumpFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/BumpFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).BumpFee(ctx, req.(*Txid))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddWatchedScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddWatchedScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/AddWatchedScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddWatchedScript(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetConfirmations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Txid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetConfirmations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/GetConfirmations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetConfirmations(ctx, req.(*Txid))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SweepAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SweepInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SweepAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/SweepAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SweepAddress(ctx, req.(*SweepInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateMultisigSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultisigInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateMultisigSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/CreateMultisigSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateMultisigSignature(ctx, req.(*CreateMultisigInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Multisign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultisignInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Multisign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Multisign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Multisign(ctx, req.(*MultisignInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_EstimateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateFeeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).EstimateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/EstimateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).EstimateFee(ctx, req.(*EstimateFeeData))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetKey(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListKeys(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ListAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListAddresses(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_WalletNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CoinSelection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).WalletNotify(m, &aPIWalletNotifyServer{stream})
}

type API_WalletNotifyServer interface {
	Send(*Tx) error
	grpc.ServerStream
}

type aPIWalletNotifyServer struct {
	grpc.ServerStream
}

func (x *aPIWalletNotifyServer) Send(m *Tx) error {
	return x.ServerStream.SendMsg(m)
}

func _API_DumpTables_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CoinSelection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).DumpTables(m, &aPIDumpTablesServer{stream})
}

type API_DumpTablesServer interface {
	Send(*Row) error
	grpc.ServerStream
}

type aPIDumpTablesServer struct {
	grpc.ServerStream
}

func (x *aPIDumpTablesServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _API_Stop_Handler,
		},
		{
			MethodName: "CurrentAddress",
			Handler:    _API_CurrentAddress_Handler,
		},
		{
			MethodName: "NewAddress",
			Handler:    _API_NewAddress_Handler,
		},
		{
			MethodName: "ChainTip",
			Handler:    _API_ChainTip_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _API_Balance_Handler,
		},
		{
			MethodName: "MasterPrivateKey",
			Handler:    _API_MasterPrivateKey_Handler,
		},
		{
			MethodName: "MasterPublicKey",
			Handler:    _API_MasterPublicKey_Handler,
		},
		{
			MethodName: "HasKey",
			Handler:    _API_HasKey_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _API_Params_Handler,
		},
		{
			MethodName: "Transactions",
			Handler:    _API_Transactions_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _API_GetTransaction_Handler,
		},
		{
			MethodName: "GetFeePerByte",
			Handler:    _API_GetFeePerByte_Handler,
		},
		{
			MethodName: "Spend",
			Handler:    _API_Spend_Handler,
		},
		{
			MethodName: "BumpFee",
			Handler:    _API_BumpFee_Handler,
		},
		{
			MethodName: "AddWatchedScript",
			Handler:    _API_AddWatchedScript_Handler,
		},
		{
			MethodName: "GetConfirmations",
			Handler:    _API_GetConfirmations_Handler,
		},
		{
			MethodName: "SweepAddress",
			Handler:    _API_SweepAddress_Handler,
		},
		{
			MethodName: "CreateMultisigSignature",
			Handler:    _API_CreateMultisigSignature_Handler,
		},
		{
			MethodName: "Multisign",
			Handler:    _API_Multisign_Handler,
		},
		{
			MethodName: "EstimateFee",
			Handler:    _API_EstimateFee_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _API_GetKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _API_ListKeys_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _API_ListAddresses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WalletNotify",
			Handler:       _API_WalletNotify_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DumpTables",
			Handler:       _API_DumpTables_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcd, 0x72, 0xdb, 0xb6,
	0x13, 0xd7, 0x07, 0xf5, 0xc1, 0x35, 0xe5, 0x28, 0xf8, 0xff, 0x9b, 0xa8, 0x6e, 0xc6, 0x51, 0xd0,
	0x1c, 0x1c, 0x37, 0x75, 0x62, 0x65, 0xda, 0xc9, 0xa1, 0x9d, 0x8c, 0xad, 0xd8, 0x8e, 0x6a, 0x5b,
	0xf6, 0xc0, 0xea, 0xa4, 0xcd, 0x25, 0x03, 0x89, 0x6b, 0x9b, 0x13, 0x89, 0xe4, 0x90, 0x60, 0x2c,
	0xdd, 0x7b, 0xe9, 0x3b, 0xf4, 0xd4, 0x27, 0xe8, 0x5b, 0xf4, 0x09, 0xfa, 0x3e, 0x1d, 0x80, 0xa0,
	0x48, 0x3a, 0x4a, 0xa2, 0xf4, 0x90, 0xdb, 0x62, 0xf7, 0x47, 0x60, 0xf7, 0xb7, 0x8b, 0xc5, 0x12,
	0x4c, 0xee, 0x3b, 0x5b, 0x7e, 0xe0, 0x09, 0x8f, 0x94, 0xfc, 0xe1, 0xda, 0xdd, 0x0b, 0xcf, 0xbb,
	0x18, 0xe3, 0x23, 0xa5, 0x19, 0x46, 0xe7, 0x8f, 0x84, 0x33, 0xc1, 0x50, 0xf0, 0x89, 0x1f, 0x83,
	0x68, 0x0d, 0x2a, 0x7b, 0x13, 0x5f, 0xcc, 0xe8, 0x36, 0x34, 0xba, 0x9e, 0xe3, 0x9e, 0xe1, 0x18,
	0x47, 0xc2, 0xf1, 0x5c, 0xd2, 0x06, 0x63, 0xe4, 0x39, 0x6e, 0xab, 0xd8, 0x2e, 0x6e, 0xac, 0x76,
	0xac, 0x2d, 0x7f, 0xb8, 0x25, 0x01, 0x83, 0x99, 0x8f, 0x4c, 0x59, 0xe8, 0x97, 0x50, 0x66, 0xde,
	0x15, 0x21, 0x60, 0xd8, 0x5c, 0x70, 0x05, 0x34, 0x99, 0x92, 0xe9, 0x2b, 0xb0, 0x0e, 0x71, 0xf6,
	0x09, 0x9b, 0x91, 0x0d, 0xa8, 0xf9, 0x51, 0xe0, 0x7b, 0x21, 0xb6, 0x4a, 0x0a, 0xb4, 0x2a, 0x41,
	0x87, 0x38, 0x3b, 0x8d, 0xb5, 0x2c, 0x31, 0xd3, 0x67, 0x50, 0xdb, 0xb1, 0xed, 0x00, 0xc3, 0x70,
	0x89, 0x6d, 0x09, 0x18, 0xdc, 0xb6, 0x03, 0xb5, 0xa7, 0xc9, 0x94, 0x4c, 0xdb, 0x50, 0x7d, 0x81,
	0xce, 0xc5, 0xa5, 0x20, 0xb7, 0xa0, 0x7a, 0xa9, 0x24, 0xb5, 0x43, 0x83, 0xe9, 0x15, 0xfd, 0x09,
	0xea, 0xbb, 0x7c, 0xcc, 0xdd, 0x11, 0x86, 0xe4, 0x0e, 0x98, 0x23, 0xcf, 0x3d, 0x77, 0x82, 0x09,
	0xda, 0x0a, 0x66, 0xb0, 0x54, 0x41, 0xda, 0xb0, 0x12, 0xb9, 0xa9, 0xbd, 0xa4, 0xec, 0x59, 0x15,
	0xbd, 0x0d, 0xe5, 0x43, 0x9c, 0x91, 0x26, 0x94, 0xdf, 0xe0, 0x4c, 0x93, 0x24, 0x45, 0xfa, 0x35,
	0x18, 0x87, 0x38, 0x0b, 0xc9, 0x57, 0x60, 0xbc, 0xc1, 0x59, 0xd8, 0x2a, 0xb6, 0xcb, 0x1b, 0x2b,
	0x9d, 0x9a, 0x0e, 0x9b, 0x29, 0x25, 0xfd, 0x1e, 0x4c, 0x1d, 0x2c, 0x86, 0xe4, 0x01, 0x98, 0x3c,
	0x59, 0x68, 0xf8, 0x8a, 0x84, 0x6b, 0x04, 0x4b, 0xad, 0x94, 0x82, 0xb5, 0xeb, 0x79, 0x63, 0x86,
	0xa1, 0xef, 0xb9, 0x21, 0x4a, 0x1e, 0x86, 0x9e, 0x37, 0x56, 0xe7, 0xd7, 0x99, 0x92, 0xe9, 0x5d,
	0x30, 0xfb, 0x28, 0x4e, 0x79, 0xc0, 0x27, 0xa1, 0x04, 0xb8, 0x7c, 0x82, 0x49, 0x16, 0xa5, 0x4c,
	0x7f, 0x84, 0x1b, 0x83, 0x80, 0xbb, 0x21, 0x57, 0x49, 0x3c, 0x72, 0x42, 0x41, 0x36, 0xc1, 0x12,
	0xa9, 0x2a, 0xf1, 0xa2, 0x2a, 0xbd, 0x18, 0x4c, 0x59, 0xce, 0x46, 0xff, 0x2a, 0x42, 0x69, 0x30,
	0x95, 0x3b, 0x8b, 0xa9, 0x63, 0x27, 0x3b, 0x4b, 0x99, 0xfc, 0x1f, 0x2a, 0x6f, 0xf9, 0x38, 0x8a,
	0x73, 0x5d, 0x66, 0xf1, 0x22, 0x93, 0x8e, 0x72, 0xbb, 0xb8, 0x51, 0x49, 0xd2, 0x41, 0x9e, 0x82,
	0x39, 0xaf, 0xdb, 0x96, 0xd1, 0x2e, 0x6e, 0xac, 0x74, 0xd6, 0xb6, 0xe2, 0xca, 0xde, 0x4a, 0x2a,
	0x7b, 0x6b, 0x90, 0x20, 0x58, 0x0a, 0x96, 0xc9, 0xbb, 0xe2, 0x62, 0x74, 0x79, 0xe2, 0x8e, 0x67,
	0xad, 0x8a, 0x8a, 0x3d, 0x55, 0xc8, 0x9c, 0x04, 0xfc, 0xaa, 0x55, 0x6d, 0x17, 0x37, 0x2c, 0x26,
	0x45, 0xfa, 0x03, 0x18, 0x03, 0xe9, 0xdf, 0x52, 0x85, 0x75, 0xc9, 0xc3, 0xcb, 0xa4, 0xb0, 0xa4,
	0x4c, 0x5f, 0xc3, 0xcd, 0x7d, 0xc4, 0x23, 0x7c, 0x8b, 0xe3, 0x4f, 0x2b, 0xfd, 0xfa, 0xb9, 0xfe,
	0x4c, 0xd7, 0xbe, 0x42, 0x25, 0x5b, 0xb1, 0xb9, 0x95, 0xae, 0x03, 0xec, 0x23, 0x9e, 0x62, 0xb0,
	0x3b, 0x13, 0x28, 0xdd, 0x3f, 0x47, 0xd4, 0x35, 0x29, 0x45, 0x59, 0x6b, 0xfb, 0xb8, 0xc8, 0xf0,
	0x7b, 0x11, 0xcc, 0x33, 0x1f, 0x5d, 0xbb, 0xe7, 0x9e, 0x7b, 0x4b, 0xb8, 0xd4, 0x82, 0x9a, 0xae,
	0x25, 0x1d, 0x60, 0xb2, 0x94, 0x39, 0xe2, 0x13, 0x2f, 0x72, 0xe3, 0x1c, 0x19, 0x4c, 0xaf, 0x72,
	0x41, 0x18, 0x1f, 0x0c, 0xe2, 0x3b, 0xd9, 0x69, 0xd4, 0xed, 0xe0, 0xaa, 0x4e, 0xc8, 0x7d, 0x68,
	0x8c, 0xb2, 0x0a, 0x7d, 0x19, 0xf3, 0x4a, 0xba, 0x0f, 0xc6, 0xcf, 0x62, 0xea, 0xbd, 0xaf, 0x9c,
	0x1c, 0xd7, 0xc6, 0xa9, 0x72, 0xb6, 0xc1, 0xe2, 0x45, 0x5a, 0x64, 0xb1, 0xa7, 0xf1, 0x82, 0xfe,
	0x2d, 0xa9, 0xb8, 0x42, 0xf4, 0x97, 0xa4, 0x62, 0x1d, 0x2a, 0x91, 0x98, 0x7a, 0x92, 0x08, 0x59,
	0xea, 0x75, 0x09, 0x91, 0x8e, 0xb0, 0x58, 0x9d, 0xa5, 0xaa, 0x9c, 0xa7, 0x4a, 0x5f, 0x79, 0x63,
	0x7e, 0xe5, 0x09, 0x05, 0x2b, 0x40, 0x1b, 0x71, 0x72, 0x36, 0x0a, 0x1c, 0x5f, 0xa8, 0x8a, 0xb4,
	0x58, 0x4e, 0x97, 0x23, 0xb2, 0xfa, 0x41, 0x22, 0xb7, 0xa1, 0xd2, 0x73, 0xfd, 0x48, 0x2c, 0x4f,
	0x09, 0xdd, 0x85, 0xea, 0x49, 0x24, 0xe4, 0x37, 0x14, 0xac, 0x50, 0x1d, 0x78, 0x1a, 0x0d, 0x0f,
	0x75, 0x63, 0xb2, 0x58, 0x4e, 0x97, 0xbf, 0xa5, 0x73, 0x02, 0x9f, 0x81, 0x79, 0xe6, 0x5c, 0xb8,
	0x5c, 0x44, 0x01, 0xa6, 0xc7, 0x14, 0xb3, 0xcc, 0xdf, 0x01, 0x33, 0x4c, 0x20, 0xea, 0x63, 0x8b,
	0xa5, 0x0a, 0xfa, 0x4f, 0x11, 0x48, 0x37, 0x40, 0x2e, 0xf0, 0x38, 0x1a, 0x0b, 0x27, 0x74, 0x2e,
	0x96, 0x4c, 0xc5, 0x3d, 0xa8, 0x3a, 0x32, 0xe0, 0x24, 0x17, 0xa6, 0xc4, 0x28, 0x0a, 0x98, 0x36,
	0x90, 0xfb, 0x50, 0xf3, 0x54, 0x80, 0x32, 0x1b, 0x12, 0x03, 0x12, 0x13, 0xc7, 0xcc, 0x12, 0xd3,
	0x7f, 0xcc, 0xcc, 0x3a, 0xc0, 0xf9, 0xfc, 0xf6, 0xa9, 0xdc, 0x18, 0x2c, 0xa3, 0xa1, 0x1d, 0x68,
	0xcc, 0x89, 0x51, 0xcd, 0xf2, 0x1e, 0x18, 0xa1, 0x73, 0x91, 0x34, 0xc9, 0x86, 0xf4, 0x64, 0x0e,
	0x60, 0xca, 0x44, 0xff, 0x2c, 0x41, 0x23, 0x61, 0xc1, 0xfd, 0xdc, 0x34, 0xc4, 0xfe, 0x6d, 0xb7,
	0x8c, 0xf7, 0xf9, 0xb7, 0xad, 0x21, 0x9d, 0x56, 0xe5, 0x7d, 0x90, 0xce, 0x3b, 0xd4, 0x55, 0x3f,
	0x4a, 0x5d, 0xed, 0x3a, 0x75, 0xb2, 0x60, 0x86, 0x81, 0xc7, 0xed, 0x11, 0x0f, 0x45, 0xab, 0x1e,
	0xf7, 0xe9, 0xb9, 0x82, 0xde, 0x86, 0x0a, 0xe3, 0x57, 0x83, 0x29, 0x59, 0x85, 0x92, 0x98, 0xea,
	0x52, 0x2d, 0x89, 0x29, 0xfd, 0xa3, 0x08, 0x37, 0xf6, 0x42, 0xe1, 0x4c, 0xb8, 0xc0, 0x7d, 0xc4,
	0xe7, 0x5c, 0xf0, 0xcf, 0xc9, 0x5f, 0x3e, 0x2a, 0xe3, 0x7a, 0x54, 0x9b, 0xbb, 0x50, 0x4f, 0x8e,
	0x26, 0x2b, 0x50, 0xdb, 0xed, 0x0d, 0xba, 0x27, 0xbd, 0x7e, 0xb3, 0x40, 0x9a, 0x60, 0xe9, 0xc5,
	0xeb, 0xee, 0xce, 0xd9, 0x8b, 0x66, 0x91, 0x98, 0x50, 0x79, 0xa5, 0xc4, 0x12, 0xb1, 0xa0, 0x7e,
	0xd4, 0x1b, 0xec, 0x29, 0x68, 0x79, 0x73, 0x03, 0x20, 0x1d, 0x82, 0xa4, 0xad, 0xd7, 0x1f, 0xec,
	0xb1, 0xfe, 0xce, 0x51, 0xb3, 0x20, 0x57, 0x7b, 0xbf, 0xe8, 0x55, 0x71, 0xb3, 0x03, 0xf5, 0xa4,
	0x49, 0x28, 0x4b, 0xf7, 0xa4, 0x7f, 0x72, 0xdc, 0xeb, 0x36, 0x0b, 0x04, 0xa0, 0xda, 0x3f, 0x61,
	0xc7, 0x12, 0x25, 0x2d, 0xa7, 0xac, 0x77, 0xc2, 0x7a, 0x83, 0x5f, 0x9b, 0xa5, 0xce, 0x6f, 0x26,
	0x94, 0x77, 0x4e, 0x7b, 0x64, 0x1d, 0x8c, 0x33, 0xe1, 0xf9, 0x44, 0x51, 0xa1, 0x06, 0xc2, 0xb5,
	0x54, 0xa4, 0x05, 0xb2, 0x0d, 0xab, 0xdd, 0x28, 0x08, 0xd0, 0x15, 0xc9, 0xe8, 0xd5, 0xd4, 0x73,
	0xca, 0xfc, 0xa1, 0x5b, 0xcb, 0x8e, 0x22, 0xb4, 0x40, 0xbe, 0x05, 0xe8, 0xe3, 0xd5, 0xd2, 0xf0,
	0x6f, 0xa0, 0xde, 0xbd, 0xe4, 0x8e, 0x3b, 0x70, 0x7c, 0x72, 0x33, 0x49, 0x5a, 0x8a, 0x56, 0xfc,
	0xc7, 0x53, 0x1b, 0x2d, 0x90, 0x87, 0x50, 0xd3, 0xf3, 0xd9, 0x22, 0xac, 0xca, 0x79, 0x32, 0xbf,
	0xd1, 0x02, 0x79, 0x0c, 0xcd, 0x63, 0x1e, 0x0a, 0x0c, 0x4e, 0x03, 0xe7, 0x2d, 0x17, 0x28, 0x5b,
	0xdb, 0x82, 0xcf, 0x92, 0xc9, 0x8b, 0x16, 0xc8, 0x23, 0xb8, 0xa1, 0xbf, 0x88, 0x86, 0x63, 0x67,
	0xf4, 0xf1, 0x0f, 0x1e, 0x40, 0xf5, 0x05, 0x0f, 0x25, 0x2e, 0x1b, 0xd6, 0x9a, 0x8a, 0x3a, 0x3b,
	0x87, 0xd1, 0x02, 0xb9, 0x0f, 0x55, 0x3d, 0x72, 0x65, 0xc8, 0x56, 0x17, 0x6b, 0x3e, 0x8c, 0xd1,
	0x02, 0x79, 0x0a, 0x56, 0x66, 0xf4, 0x0a, 0x17, 0x1d, 0xff, 0x3f, 0x35, 0x74, 0xe5, 0xe7, 0x33,
	0xb5, 0xff, 0xea, 0x01, 0x8a, 0x8c, 0x9e, 0xd4, 0xe3, 0xe9, 0xcc, 0xb1, 0xd7, 0xf4, 0x9c, 0xa6,
	0xf6, 0x6f, 0x1c, 0xa0, 0xc8, 0x0c, 0x13, 0x5f, 0x64, 0x1f, 0x99, 0xf4, 0x90, 0x55, 0xad, 0x4e,
	0x7a, 0x5c, 0x81, 0x50, 0xa8, 0xa8, 0x49, 0x82, 0xc4, 0xcd, 0x20, 0x19, 0x2a, 0xd6, 0xe6, 0xa7,
	0xd0, 0x02, 0xb9, 0x0b, 0xb5, 0xdd, 0x68, 0xe2, 0xcb, 0x59, 0x24, 0x3d, 0x3c, 0x0b, 0x78, 0x08,
	0xcd, 0x1d, 0xdb, 0x7e, 0x29, 0x27, 0x31, 0xb4, 0x75, 0x8f, 0xc8, 0x31, 0x77, 0xad, 0xfa, 0x9a,
	0x07, 0x28, 0xf2, 0x43, 0x43, 0xba, 0xaf, 0xa6, 0x26, 0x3b, 0x2b, 0xc8, 0x84, 0x58, 0xea, 0x91,
	0x4f, 0xea, 0x2f, 0x76, 0x36, 0x79, 0xf6, 0x73, 0xbe, 0xec, 0xc3, 0xed, 0xfc, 0x6b, 0x94, 0xbe,
	0x6e, 0xb7, 0xd4, 0xd6, 0xef, 0x3c, 0x55, 0xf1, 0x91, 0xb9, 0x5e, 0xaf, 0x2a, 0xd8, 0x9c, 0x77,
	0xf2, 0x38, 0x5f, 0xb9, 0xc6, 0x1e, 0x87, 0xa4, 0xfa, 0x98, 0xba, 0x1d, 0x2b, 0x99, 0xc6, 0x45,
	0x54, 0x2e, 0xaf, 0x75, 0xb2, 0xb8, 0xbe, 0xf6, 0x51, 0x92, 0xde, 0x86, 0xea, 0x01, 0x8a, 0x77,
	0xea, 0x2b, 0x57, 0x81, 0x75, 0xe9, 0x87, 0xfa, 0xa3, 0x58, 0x50, 0x2c, 0x75, 0x8d, 0x94, 0xdc,
	0x3c, 0x81, 0x86, 0x84, 0xa6, 0xff, 0x15, 0x0b, 0xf0, 0x8d, 0xcc, 0x31, 0x18, 0x5f, 0x67, 0xeb,
	0x25, 0x1f, 0x8f, 0x51, 0xf4, 0x3d, 0xe1, 0x9c, 0x2f, 0xbc, 0x0f, 0xf3, 0xea, 0x7a, 0x5c, 0x24,
	0x0f, 0x01, 0x9e, 0x47, 0x13, 0x7f, 0xc0, 0x87, 0xe3, 0xc5, 0x07, 0x28, 0xd7, 0x99, 0x77, 0x25,
	0xd1, 0xc3, 0xaa, 0x9a, 0xe2, 0x9f, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x24, 0x23, 0x99,
	0xbe, 0x0e, 0x00, 0x00,
}
